{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","hora","addEventListener","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","textContent","tag","etiqueta","createElement","ondblclick","eliminarTag","appendChild","actualizarInputHidden","toString","split","keyCode","trim","preventDefault","console","log"],"mappings":"CAAA,WAKA,GAFAA,SAAAC,cAAA,YAEA,CAEA,IAAAC,EAAA,CACAC,aAAA,GACAC,IAAA,IAIA,MAAAC,EAAAL,SAAAC,cAAA,yBAEAK,EAAAN,SAAAO,iBAAA,gBAGAC,EAAAR,SAAAC,cAAA,mBACAQ,EAAAT,SAAAC,cAAA,oBAQA,SAAAS,EAAAC,GAEAT,EAAAS,EAAAC,OAAAC,MAAAF,EAAAC,OAAAE,MAGAL,EAAAK,MAAA,GACAN,EAAAM,MAAA,GAGA,MAAAC,EAAAf,SAAAC,cAAA,8BACAc,GACAA,EAAAC,UAAAC,OAAA,6BAIAC,OAAAC,OAAAjB,GAAAkB,SAAA,KAQAC,iBACA,MAAAjB,IAAAA,EAAAD,aAAAA,GAAAD,EACAoB,EAAA,+BAAAlB,kBAAAD,IAEAoB,QAAAC,MAAAF,IAQA,SAAAG,GAIA,MAAAC,EAAA1B,SAAAO,iBAAA,aACAmB,EAAAC,QAAAC,GAAAA,EAAAZ,UAAAa,IAAA,+BAGA,MAAAC,EAAAL,EAAAM,IAAAC,GAAAA,EAAAC,SAGAC,EAAAC,MAAAC,KAAAV,GAGAQ,EAAAG,OAAAT,IAAAE,EAAAV,SAAAQ,EAAAU,QAAAC,SAGAZ,QAAAC,GAAAA,EAAAZ,UAAAC,OAAA,+BAGAjB,SAAAO,iBAAA,8CAEAoB,QAAAa,GAAAA,EAAAC,iBAAA,QAAAC,IA1BAC,OAHApB,EAAAqB,QATAC,GA0CA,SAAAH,EAAA/B,GAGA,MAAAI,EAAAf,SAAAC,cAAA,8BACAc,GACAA,EAAAC,UAAAC,OAAA,6BAIAN,EAAAC,OAAAI,UAAAa,IAAA,6BAGApB,EAAAK,MAAAH,EAAAC,OAAA0B,QAAAC,OACA/B,EAAAR,SAAAC,cAAA,wBA/EAI,EAAAoC,iBAAA,SAAA/B,GACAJ,EAAAqB,QAAAvB,GAAAA,EAAAqC,iBAAA,SAAA/B,KAvBA,GCEAV,SAAAC,gBCFA,WAEA,MAAA6C,EAAA9C,SAAAC,cAAA,eAEA,GAAA6C,EAAA,CAEA,MAAAC,EAAA/C,SAAAC,cAAA,SACA+C,EAAAhD,SAAAC,cAAA,iBAEA,IAAAgD,EAAA,GAgCA,SAAAC,IACAH,EAAAI,YAAA,GACAF,EAAAtB,QAAAyB,IACA,MAAAC,EAAArD,SAAAsD,cAAA,MACAD,EAAArC,UAAAa,IAAA,mBACAwB,EAAAF,YAAAC,EACAC,EAAAE,WAAAC,EACAT,EAAAU,YAAAJ,KAEAK,IAIA,SAAAF,EAAA7C,GACAA,EAAAC,OAAAK,SACAgC,EAAAA,EAAAZ,OAAAe,GAAAA,IAAAzC,EAAAC,OAAAuC,aACAO,IAGA,SAAAA,IACAV,EAAAlC,MAAAmC,EAAAU,WAjDA,KAAAX,EAAAlC,QACAmC,EAAAD,EAAAlC,MAAA8C,MAAA,KACAV,KAIAJ,EAAAL,iBAAA,YAGA,SAAA9B,GAEA,GAAA,KAAAA,EAAAkD,QAAA,CAEA,GAAA,KAAAlD,EAAAC,OAAAE,MAAAgD,QAAAnD,EAAAC,OAAAE,MAAA,EACA,OAGAH,EAAAoD,iBAEAd,EAAA,IAAAA,EAAAtC,EAAAC,OAAAE,MAAAgD,QAEAhB,EAAAhC,MAAA,GAEAoC,IACAc,QAAAC,IAAAhB,QApCA","file":"bundle.js","sourcesContent":["(function(){\r\n    \r\n    //seleccionar horas\r\n    const horas = document.querySelector('#horasUl');\r\n\r\n    if(horas){\r\n        //objeto a llenar con los datos\r\n        let busqueda = {\r\n            categoria_id : '',\r\n            dia : ''\r\n        }\r\n\r\n        //seleccionar categoria conferencia o workshops\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        //seleccionar viernes o sabado\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n\r\n        //es el input oculto a llenar\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n        //agrego eventos a categoria y dias, y escuchar cambios\r\n        categoria.addEventListener('change', terminoBusqueda);\r\n        dias.forEach( dia => dia.addEventListener('change', terminoBusqueda))\r\n\r\n    /* ============================ AGREGAR DATOS AL OBJETO ============================ */\r\n        //agrega el valor la categoria o dia \r\n        function terminoBusqueda(e){\r\n            //llenar el objeto con datos a consultar\r\n            busqueda[e.target.name] = e.target.value;\r\n            \r\n            //reiniciar campos ocultos y seleccion de horas, para al hacer click se refresque para cada dia\r\n            inputHiddenHora.value = '';\r\n            inputHiddenDia.value = '';\r\n            \r\n            //Deshabilitar hora previa\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if(horaPrevia){\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n            \r\n            //evitar consulta innecesaria hasta que este completo el objeto\r\n            if(Object.values(busqueda).includes('')){\r\n                return;\r\n            }\r\n            \r\n            buscarEventos();\r\n        }\r\n        \r\n        /* ============================ CONSULTAR DATOS API ============================ */\r\n        async function buscarEventos(){\r\n            const {dia, categoria_id} = busqueda;\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n            const resultado = await fetch(url);\r\n            const eventos = await resultado.json();\r\n            \r\n            //traer de la db los eventos disponibles para ese dia y categoria\r\n            obtenerHorasDisponibles(eventos);\r\n        }\r\n\r\n        /* ============================ SELECCIONAR HORAS DISPONIBLES ============================ */\r\n        function obtenerHorasDisponibles(eventos) {\r\n            //Comprobar elementos ya tomados y quitar la variable deshabilitado\r\n            \r\n            //retorna un nodelist, no un array, con todas las horas que existen\r\n            const listadoHoras = document.querySelectorAll('#horas li');\r\n            listadoHoras.forEach(li => li.classList.add('horas__hora--deshabilitada'));\r\n\r\n            //de los eventos traidos de la db, solo dejamos un array con los de hora_id\r\n            const horasTomadas = eventos.map(evento => evento.hora_id);\r\n\r\n            //conversion de nodelist a array\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n\r\n            //filtrar todos los que no trae eventos.map, osea los disponibles\r\n            const resultado = listadoHorasArray.filter( li => !horasTomadas.includes(li.dataset.horaId));\r\n            \r\n            //quitar clase de deshabilitada a las disponibles\r\n            resultado.forEach(li => li.classList.remove('horas__hora--deshabilitada'));\r\n\r\n            //seleccionar las horas solo que esten disponibles\r\n            const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\r\n            //asociar evento click solo a las disponibles\r\n            horasDisponibles.forEach( hora => hora.addEventListener('click', seleccionarHora));\r\n        }\r\n        \r\n        /* ============================ AGREGAR DATASET.ID AL INPUT ============================ */\r\n        function seleccionarHora(e) {\r\n\r\n            //Deshabilitar hora previa\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if(horaPrevia){\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n     \r\n            //Agregar clase de seleccionado\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n\r\n            //agregar hora y dia para el formulario\r\n            inputHiddenHora.value = e.target.dataset.horaId; \r\n            inputHiddenDia = document.querySelector('[name=\"dia\"]:checked');\r\n        }\r\n    }\r\n\r\n\r\n\r\n})();","(function(){\r\n\r\n    const ponentesInput = document.querySelector();\r\n\r\n})();","(function(){\r\n\r\nconst tagsInput = document.querySelector('#tags_input')\r\n\r\nif(tagsInput){\r\n    //\r\n    const tagsDiv = document.querySelector('#tags');\r\n    const tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n    //arreglo vacio para llenar luego\r\n    let tags = [];\r\n\r\n    //recuperar input oculto\r\n    if(tagsInputHidden.value !== ''){\r\n        tags = tagsInputHidden.value.split(',');\r\n        mostrarTags();\r\n    }\r\n\r\n    //escuchar los cambios en el input\r\n    tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n/* ============================ GUARDAR TAGS ============================ */\r\nfunction guardarTag(e){\r\n    //si presiona coma\r\n        if(e.keyCode === 44){\r\n            //validar si no hay nada\r\n            if(e.target.value.trim() === '' || e.target.value < 1){\r\n                return;\r\n            }\r\n            //que no escriba la coma\r\n            e.preventDefault();\r\n            //copiar arreglo y agregar nuevo valor\r\n            tags = [...tags, e.target.value.trim()]\r\n            //limpiar input\r\n            tagsInput.value = '';\r\n\r\n            mostrarTags();\r\n            console.log(tags);\r\n        }\r\n    }\r\n    \r\n/* ============================ MOSTRAR TAGS ============================ */\r\nfunction mostrarTags(){\r\n    tagsDiv.textContent = '';\r\n    tags.forEach(tag =>{\r\n        const etiqueta = document.createElement('LI');\r\n        etiqueta.classList.add('formulario__tag');\r\n        etiqueta.textContent = tag;\r\n        etiqueta.ondblclick = eliminarTag;\r\n        tagsDiv.appendChild(etiqueta);\r\n    })\r\n    actualizarInputHidden();\r\n}\r\n\r\n/* ============================ ELIMINAR TAGS ============================ */\r\nfunction eliminarTag(e) {\r\n    e.target.remove()\r\n    tags = tags.filter(tag => tag !== e.target.textContent)\r\n    actualizarInputHidden();\r\n}\r\n/* ============================ ALMACENAR TAGS ============================ */\r\nfunction actualizarInputHidden() {\r\n    tagsInputHidden.value = tags.toString();\r\n }\r\n}\r\n})();"]}